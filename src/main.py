import os
import asyncio
import requests
import matplotlib.pyplot as plt
from io import BytesIO
from datetime import datetime

from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart, Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, BufferedInputFile

from dotenv import load_dotenv, find_dotenv

from sqlalchemy import create_engine, Column, Integer, String, Boolean, DateTime, func
from sqlalchemy.orm import declarative_base
from sqlalchemy.orm import sessionmaker, scoped_session

# –∑–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑ .env
load_dotenv(find_dotenv())
bot = Bot(token=os.getenv("TOKEN"))
dp = Dispatcher()

# –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–æ–≤
LOG_FILE = "resources/command_logs.txt"

DATABASE_URL = os.getenv("DATABASE_URL", "sqlite:///bot_database.db")
engine = create_engine(DATABASE_URL)
Base = declarative_base()
session_factory = sessionmaker(bind=engine)
Session = scoped_session(session_factory)


class User(Base):
    __tablename__ = "users"

    id = Column(Integer, primary_key=True)
    telegram_id = Column(Integer, unique=True, nullable=False)
    username = Column(String(255), nullable=True)
    full_name = Column(String(255), nullable=True)
    language = Column(String(2), default='ru')
    is_active = Column(Boolean, default=True)
    first_seen = Column(DateTime, default=func.now())
    last_activity = Column(DateTime, default=func.now(), onupdate=func.now())

    def __repr__(self):
        return f"<User(telegram_id={self.telegram_id}, username={self.username})>"


Base.metadata.create_all(engine)


# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è/—Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def get_or_create_user(user_id, username=None, full_name=None):
    session = Session()
    try:
        user = session.query(User).filter(User.telegram_id == user_id).first()
        if not user:
            user = User(
                telegram_id=user_id,
                username=username,
                full_name=full_name
            )
            session.add(user)
            session.commit()
        return user
    finally:
        session.close()


# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
async def update_user_activity(user_id):
    session = Session()
    try:
        user = session.query(User).filter(User.telegram_id == user_id).first()
        if user:
            user.last_activity = func.now()
            session.commit()
    finally:
        session.close()


# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥
async def log_command(message: types.Message, command: str):
    user_id = message.from_user.id
    username = message.from_user.username or "No username"
    full_name = message.from_user.full_name or "No name"
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    # –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –±–¥
    await get_or_create_user(user_id, username, full_name)
    await update_user_activity(user_id)

    log_entry = f"[{timestamp}] User ID: {user_id}, Username: @{username}, Name: {full_name}, Command: {command}\n"

    # —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ª–æ–≥–∞
    os.makedirs(os.path.dirname(LOG_FILE) if os.path.dirname(LOG_FILE) else '.', exist_ok=True)

    # –∑–∞–ø–∏—Å—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ —Ñ–∞–π–ª
    with open(LOG_FILE, "a", encoding="utf-8") as log_file:
        log_file.write(log_entry)


# –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
popular_tokens = {
    'BTC': 'bitcoin',
    'ETH': 'ethereum',
    'SOL': 'solana',
    'BNB': 'binancecoin',
    'DOGE': 'dogecoin'
}

# —Å–ª–æ–≤–∞—Ä–∏ —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏ –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –±–æ—Ç–∞
translations = {
    'ru': {
        "welcome": "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –∫—Ä–∏–ø—Ç–æ-–±–æ—Ç. –ü–æ–º–æ–≥—É —É–∑–Ω–∞—Ç—å –∫—É—Ä—Å—ã, –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏ –∏ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–æ–∑–∏—Ü–∏–∏.\n\n"
                   "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –≤–≤–µ–¥–∏ /menu –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.",
        "open_menu": "üìã –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é",
        "menu_title": "üìã –ú–µ–Ω—é –∫–æ–º–∞–Ω–¥:",
        "menu_crypto": "/crypto ‚Äî –∫—É—Ä—Å—ã —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç.",
        "menu_calc": "/calc <—Ü–µ–Ω–∞_–≤—Ö–æ–¥–∞> <–ø–ª–µ—á–æ> <–±–∞–ª–∞–Ω—Å> ‚Äî –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø–æ–∑–∏—Ü–∏–∏.",
        "menu_chart": "/chart ‚Äî –≤—ã–±–æ—Ä –∫–æ–∏–Ω–∞ –∏ –µ–≥–æ –≥—Ä–∞—Ñ–∏–∫.",
        "menu_faq": "/faq ‚Äî —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –Ω–∏—Ö.",
        "menu_help": "/help ‚Äî –ø–æ–º–æ—â—å",
        "menu_language": "/language ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.",
        "crypto_prices": "üí± –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã:",
        "error": "–û—à–∏–±–∫–∞: {}",
        "calc_usage": "–ò—Å–ø–æ–ª—å–∑—É–π: /calc <–≤—Ö–æ–¥> <–ø–ª–µ—á–æ> <–±–∞–ª–∞–Ω—Å>",
        "position_size": "üìà –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {}",
        "liquidation_price": "‚ö†Ô∏è –õ–∏–∫–≤–∏–¥–∞—Ü–∏—è: {:.2f}",
        "faq_select": "‚ùì –í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å:",
        "question_not_found": "–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.",
        "about_bot": "‚ÑπÔ∏è <b>–û –±–æ—Ç–µ</b>\n"
                     "–Ø ‚Äî –∫—Ä–∏–ø—Ç–æ-–±–æ—Ç, –ø–æ–º–æ–≥–∞—é —Å–ª–µ–¥–∏—Ç—å –∑–∞ –∫—É—Ä—Å–∞–º–∏ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤, —Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏ –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å –ø–æ–∑–∏—Ü–∏–∏.",
        "why_bot": "üöÄ <b>–ó–∞—á–µ–º –Ω—É–∂–µ–Ω –±–æ—Ç?</b>\n"
                   "- –ë—ã—Å—Ç—Ä–æ —É–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å BTC, ETH, SOL –∏ –¥—Ä.\n"
                   "- –ü–æ—Å—Ç—Ä–æ–∏—Ç—å 7-–¥–Ω–µ–≤–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã.\n"
                   "- –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –∏ —Ü–µ–Ω—É –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏ —Å –ª—é–±—ã–º –ø–ª–µ—á–æ–º.",
        "calc_help": "üßÆ <b>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç /calc?</b>\n"
                     "–û—Ç–ø—Ä–∞–≤—å—Ç–µ <code>/calc &lt;—Ü–µ–Ω–∞_–≤—Ö–æ–¥–∞&gt; &lt;–ø–ª–µ—á–æ&gt; &lt;–±–∞–ª–∞–Ω—Å&gt;</code>:\n"
                     "‚Ä¢ <b>—Ü–µ–Ω–∞_–≤—Ö–æ–¥–∞</b> ‚Äî —Ü–µ–Ω–∞, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –≤—ã –≤–æ—à–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 20000)\n"
                     "‚Ä¢ <b>–ø–ª–µ—á–æ</b> ‚Äî –∂–µ–ª–∞–µ–º–æ–µ –∫—Ä–µ–¥–∏—Ç–Ω–æ–µ –ø–ª–µ—á–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10)\n"
                     "‚Ä¢ <b>–±–∞–ª–∞–Ω—Å</b> ‚Äî –≤–∞—à –¥–µ–ø–æ–∑–∏—Ç –≤ USD (–Ω–∞–ø—Ä–∏–º–µ—Ä, 100)\n"
                     "–ë–æ—Ç –≤–µ—Ä–Ω—ë—Ç —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –∏ —Ü–µ–Ω—É –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏.",
        "select_token": "–í—ã–±–µ—Ä–∏ —Ç–æ–∫–µ–Ω –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞:",
        "chart_caption": "üìà –ì—Ä–∞—Ñ–∏–∫ {} –∑–∞ 7 –¥–Ω–µ–π",
        "description": "üßæ –û–ø–∏—Å–∞–Ω–∏–µ:",
        "chart_error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {}",
        "hello_response": "–ò —Ç–µ–±–µ –ø—Ä–∏–≤–µ—Ç!",
        "bye_response": "–î–æ –≤—Å—Ç—Ä–µ—á–∏!",
        "unknown_command": "–ù–µ –ø–æ–Ω—è–ª üòÖ –ù–∞–ø–∏—à–∏ /menu –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.",
        "select_language": "üåê –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:",
        "language_ru": "üá∑üá∫ –†—É—Å—Å–∫–∏–π",
        "language_en": "üá¨üáß English",
        "language_changed": "üá∑üá∫ –Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ —Ä—É—Å—Å–∫–∏–π"
    },
    'en': {
        "welcome": "üëã Hello! I'm a crypto bot. I'll help you check rates, build charts and calculate positions.\n\n"
                   "Press the button below or type /menu for a list of commands.",
        "open_menu": "üìã Open menu",
        "menu_title": "üìã Command menu:",
        "menu_crypto": "/crypto ‚Äî rates of the most popular cryptocurrencies.",
        "menu_calc": "/calc <entry_price> <leverage> <balance> ‚Äî position calculator.",
        "menu_chart": "/chart ‚Äî select a coin and see its chart.",
        "menu_faq": "/faq ‚Äî frequently asked questions and answers.",
        "menu_help": "/help ‚Äî help",
        "menu_language": "/language ‚Äî change interface language.",
        "crypto_prices": "üí± Current rates:",
        "error": "Error: {}",
        "calc_usage": "Usage: /calc <entry> <leverage> <balance>",
        "position_size": "üìà Position size: {}",
        "liquidation_price": "‚ö†Ô∏è Liquidation: {:.2f}",
        "faq_select": "‚ùì Select a question:",
        "question_not_found": "Question not found.",
        "about_bot": "‚ÑπÔ∏è <b>About the bot</b>\n"
                     "I'm a crypto bot, helping you track popular token rates, build charts and calculate positions.",
        "why_bot": "üöÄ <b>Why use this bot?</b>\n"
                   "- Quickly check current BTC, ETH, SOL rates and more.\n"
                   "- Build a 7-day price chart.\n"
                   "- Calculate position size and liquidation price with any leverage.",
        "calc_help": "üßÆ <b>How does /calc work?</b>\n"
                     "Send <code>/calc &lt;entry_price&gt; &lt;leverage&gt; &lt;balance&gt;</code>:\n"
                     "‚Ä¢ <b>entry_price</b> ‚Äî price at which you entered (e.g., 20000)\n"
                     "‚Ä¢ <b>leverage</b> ‚Äî desired leverage (e.g., 10)\n"
                     "‚Ä¢ <b>balance</b> ‚Äî your deposit in USD (e.g., 100)\n"
                     "The bot will return position size and liquidation price.",
        "select_token": "Select a token for the chart:",
        "chart_caption": "üìà {} chart for 7 days",
        "description": "üßæ Description:",
        "chart_error": "Error getting data: {}",
        "hello_response": "Hello to you too!",
        "bye_response": "See you later!",
        "unknown_command": "I don't understand üòÖ Type /menu for a list of commands.",
        "select_language": "üåê Select interface language:",
        "language_ru": "üá∑üá∫ –†—É—Å—Å–∫–∏–π",
        "language_en": "üá¨üáß English",
        "language_changed": "üá¨üáß Interface language changed to English"
    }
}

# –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è –∫–æ–º–∞–Ω–¥—ã FAQ
faq_data = {
    'ru': {
        "q1": {
            "question": "–ß—Ç–æ —Ç–∞–∫–æ–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞?",
            "answer": "–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ ‚Äî —ç—Ç–æ —Ä–∞–∑–Ω–æ–≤–∏–¥–Ω–æ—Å—Ç—å —Ü–∏—Ñ—Ä–æ–≤–æ–π –≤–∞–ª—é—Ç—ã, –Ω–µ –∏–º–µ—é—â–µ–π —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ –≤–æ–ø–ª–æ—â–µ–Ω–∏—è –∏ –µ–¥–∏–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –±—ã –µ–µ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞–ª. –†–∞–±–æ—Ç–∞–µ—Ç –≤ —Ç–∞–∫ –Ω–∞–∑—ã–≤–∞–µ–º–æ–º ¬´–±–ª–æ–∫—á–µ–π–Ω–µ¬ª –∏–ª–∏ —Ü–µ–ø–æ—á–∫–µ –±–ª–æ–∫–æ–≤ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π."
        },
        "q2": {
            "question": "–ß—Ç–æ —Ç–∞–∫–æ–µ –±–ª–æ–∫—á–µ–π–Ω?",
            "answer": "–ë–ª–æ–∫—á–µ–π–Ω (–æ—Ç –∞–Ω–≥–ª. block ‚Äî ¬´–±–ª–æ–∫, –º–æ–¥—É–ª—å¬ª –∏ chain ‚Äî ¬´—Ü–µ–ø–æ—á–∫–∞¬ª) ‚Äî —ç—Ç–æ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–∞—è —Ü–µ–ø–æ—á–∫–∞ –±–ª–æ–∫–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏. –ö–∞–∂–¥—ã–π –∏–∑ –±–ª–æ–∫–æ–≤ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π. –≠—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ—Å–ª–µ–¥–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∫—É–ø–æ–∫ –∏ –ø—Ä–æ–¥–∞–∂ –∞–∫—Ç–∏–≤–∞."
        },
        "q3": {
            "question": "–ß—Ç–æ —Ç–∞–∫–æ–µ –º–∞–π–Ω–∏–Ω–≥?",
            "answer": "–ú–∞–π–Ω–∏–Ω–≥ ‚Äî —ç—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±—ã—á–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç —Å –ø–æ–º–æ—â—å—é –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤, —Ä–µ—à–∞—é—â–∏—Ö –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π. –ú–∞–π–Ω–µ—Ä—ã –ø–æ–ª—É—á–∞—é—Ç –Ω–∞–≥—Ä–∞–¥—É –∑–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–ª–æ–∫–æ–≤ –≤ –±–ª–æ–∫—á–µ–π–Ω, —á—Ç–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Å–µ—Ç–∏."
        },
        "q4": {
            "question": "–ß—Ç–æ —Ç–∞–∫–æ–µ —Ç–æ–∫–µ–Ω—ã –∏ –∏—Ö —Ç–∏–ø—ã?",
            "answer": "–¢–æ–∫–µ–Ω ‚Äî —Ü–∏—Ñ—Ä–æ–≤–æ–π –∞–∫—Ç–∏–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –±–ª–æ–∫—á–µ–π–Ω–∞. –í –æ—Ç–ª–∏—á–∏–µ –æ—Ç –∫–æ–∏–Ω–∞, —Ç–æ–∫–µ–Ω –Ω–µ –∏–º–µ–µ—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –±–ª–æ–∫—á–µ–π–Ω–∞. –¢–∏–ø—ã —Ç–æ–∫–µ–Ω–æ–≤: –∞–ª—å—Ç–∫–æ–∏–Ω, —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω, —Ç–æ–∫–µ–Ω —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –Ω–µ–≤–∑–∞–∏–º–æ–∑–∞–º–µ–Ω—è–µ–º—ã–π —Ç–æ–∫–µ–Ω (NFT)."
        }
    },
    'en': {
        "q1": {
            "question": "What is cryptocurrency?",
            "answer": "Cryptocurrency is a type of digital currency that has no physical form and no single controlling center. It operates in a so-called 'blockchain' or chain of blocks with information."
        },
        "q2": {
            "question": "What is blockchain?",
            "answer": "Blockchain is a continuous chain of data blocks. Each block contains information and a reference to the previous one. This helps, for example, to trace the history of purchases and sales of an asset."
        },
        "q3": {
            "question": "What is mining?",
            "answer": "Mining is the process of obtaining cryptocurrencies using computing devices that solve problems to confirm transactions. Miners receive rewards for adding blocks to the blockchain, which ensures network security."
        },
        "q4": {
            "question": "What are tokens and their types?",
            "answer": "A token is a blockchain-based digital asset. Unlike a coin, a token does not have its own blockchain. Token types: altcoin, stablecoin, governance token, non-fungible token (NFT)."
        }
    }
}


# –ø–æ–ª—É—á–µ–Ω–∏–µ —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–¥
async def get_user_language(user_id):
    session = Session()
    try:
        user = session.query(User).filter(User.telegram_id == user_id).first()
        if user:
            return user.language
        return 'ru'  # –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —è–∑—ã–∫
    finally:
        session.close()


# —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–¥
async def set_user_language(user_id, language):
    session = Session()
    try:
        user = session.query(User).filter(User.telegram_id == user_id).first()
        if user:
            user.language = language
            session.commit()
    finally:
        session.close()


# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
def get_crypto_price(symbols=('bitcoin', 'ethereum', 'tether'), currency='usd'):
    url = "https://api.coingecko.com/api/v3/simple/price"
    response = requests.get(url, params={'ids': ','.join(symbols), 'vs_currencies': currency})
    data = response.json()

    result = []
    for symbol in symbols:
        price = data.get(symbol, {}).get(currency)
        if price:
            result.append(f"{symbol.upper()}: {price} {currency.upper()}")
    return '\n'.join(result)


# –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø–æ–∑–∏—Ü–∏–∏ –∏ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏
def calculate_position(entry_price: float, leverage: float, balance: float):
    position_size = balance * leverage
    liquidation_price = entry_price - (entry_price * (1 / leverage)) if leverage != 0 else 0
    return {
        "position_size": position_size,
        "liquidation_price": liquidation_price
    }


# –ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω—ã –∏ –≥—Ä–∞—Ñ–∏–∫
def get_price_history(symbol='bitcoin', currency='usd', days=7):
    url = f'https://api.coingecko.com/api/v3/coins/{symbol}/market_chart'
    params = {'vs_currency': currency, 'days': days}
    res = requests.get(url, params=params)
    res.raise_for_status()
    data = res.json()
    return [(x[0], x[1]) for x in data['prices']]


def generate_price_chart(symbol='bitcoin', currency='usd', lang='ru'):
    history = get_price_history(symbol, currency)
    timestamps = [datetime.fromtimestamp(ts / 1000).strftime('%b %d') for ts, _ in history]
    prices = [price for _, price in history]

    plt.figure(figsize=(8, 4))
    plt.plot(timestamps, prices, label=f"{symbol.upper()}", color='blue')
    plt.xticks(rotation=45)

    # –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≥—Ä–∞—Ñ–∏–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
    title = f"{symbol.upper()} –¶–µ–Ω–∞ –∑–∞ 7 –¥–Ω–µ–π" if lang == 'ru' else f"{symbol.upper()} Price for 7 days"
    x_label = "–î–∞—Ç–∞" if lang == 'ru' else "Date"
    y_label = f"–¶–µ–Ω–∞ –≤ {currency.upper()}" if lang == 'ru' else f"Price in {currency.upper()}"

    plt.title(title)
    plt.xlabel(x_label)
    plt.ylabel(y_label)
    plt.tight_layout()
    plt.grid(True)
    plt.legend()

    buf = BytesIO()
    plt.savefig(buf, format='png')
    buf.seek(0)
    plt.close()
    return buf


# –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
def get_token_description(symbol='bitcoin', lang='ru'):
    url = f"https://api.coingecko.com/api/v3/coins/{symbol}"
    res = requests.get(url, params={"localization": "true"})
    res.raise_for_status()
    data = res.json()

    desc = data.get("description", {}).get(lang) or data.get("description", {}).get("en", "")
    return desc.strip()[
           :1000] + "..." if desc else "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ." if lang == 'ru' else "Description not available."


# –•–µ–Ω–¥–ª–µ—Ä—ã

@dp.message(CommandStart())
async def start_cmd(message: types.Message):
    await log_command(message, "/start")
    user_id = message.from_user.id
    username = message.from_user.username or "No username"
    full_name = message.from_user.full_name or "No name"

    # —Å–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await get_or_create_user(user_id, username, full_name)

    lang = await get_user_language(user_id)

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=translations[lang]["open_menu"], callback_data="open_menu")]
        ]
    )
    await message.answer(
        translations[lang]["welcome"],
        reply_markup=keyboard
    )


@dp.message(Command("menu"))
async def menu_cmd(message: types.Message):
    await log_command(message, "/menu")
    user_id = message.from_user.id
    lang = await get_user_language(user_id)

    await message.answer(
        f"{translations[lang]['menu_title']}\n"
        f"{translations[lang]['menu_crypto']}\n"
        f"{translations[lang]['menu_calc']}\n"
        f"{translations[lang]['menu_chart']}\n"
        f"{translations[lang]['menu_faq']}\n"
        f"{translations[lang]['menu_help']}\n"
        f"{translations[lang]['menu_language']}"
    )


@dp.message(Command("crypto"))
async def crypto_cmd(message: types.Message):
    await log_command(message, message.text)  # –ª–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é –∫–æ–º–∞–Ω–¥—É —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
    user_id = message.from_user.id
    lang = await get_user_language(user_id)

    try:
        parts = message.text.split()
        tokens = [t.lower() for t in parts[1:]] if len(parts) > 1 else ['bitcoin', 'ethereum', 'tether']
        prices = get_crypto_price(tokens)
        await message.answer(f"{translations[lang]['crypto_prices']}\n{prices}")
    except Exception as e:
        await message.answer(translations[lang]['error'].format(str(e)))


@dp.message(Command("calc"))
async def calc_cmd(message: types.Message):
    await log_command(message, message.text)
    user_id = message.from_user.id
    lang = await get_user_language(user_id)

    try:
        parts = message.text.split()
        if len(parts) != 4:
            raise ValueError(translations[lang]['calc_usage'])
        entry = float(parts[1])
        leverage = float(parts[2])
        balance = float(parts[3])
        result = calculate_position(entry, leverage, balance)
        await message.answer(
            f"{translations[lang]['position_size'].format(result['position_size'])}\n"
            f"{translations[lang]['liquidation_price'].format(result['liquidation_price'])}"
        )
    except Exception as e:
        await message.answer(translations[lang]['error'].format(str(e)))


@dp.message(Command("faq"))
async def faq_cmd(message: types.Message):
    await log_command(message, "/faq")
    user_id = message.from_user.id
    lang = await get_user_language(user_id)

    buttons = [
        [InlineKeyboardButton(text=faq_data[lang][qid]["question"], callback_data=f"faq_{qid}")]
        for qid in faq_data[lang]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await message.answer(translations[lang]["faq_select"], reply_markup=keyboard)


@dp.callback_query(lambda c: c.data.startswith("faq_"))
async def answer_faq(callback: CallbackQuery):
    user_id = callback.from_user.id
    username = callback.from_user.username or "No username"
    full_name = callback.from_user.full_name or "No name"
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await update_user_activity(user_id)

    lang = await get_user_language(user_id)

    # –ª–æ–≥–∏—Ä—É–µ–º callback-–∑–∞–ø—Ä–æ—Å—ã
    log_entry = f"[{timestamp}] User ID: {user_id}, Username: @{username}, Name: {full_name}, Callback: {callback.data}\n"
    with open(LOG_FILE, "a", encoding="utf-8") as log_file:
        log_file.write(log_entry)

    qid = callback.data.split("_", 1)[1]
    faq = faq_data[lang].get(qid)
    if faq:
        await callback.message.answer(f"üìå *{faq['question']}*\n\n{faq['answer']}", parse_mode="Markdown")
    else:
        await callback.message.answer(translations[lang]["question_not_found"])
    await callback.answer()


@dp.message(Command("help"))
async def help_cmd(message: types.Message):
    await log_command(message, "/help")
    user_id = message.from_user.id
    lang = await get_user_language(user_id)

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=translations[lang]["open_menu"], callback_data="open_menu")]
        ]
    )

    await message.answer(
        f"{translations[lang]['about_bot']}\n\n"
        f"{translations[lang]['why_bot']}\n\n"
        f"{translations[lang]['calc_help']}",
        parse_mode="HTML",
        reply_markup=keyboard
    )


@dp.callback_query(lambda c: c.data == "open_menu")
async def open_menu_callback(callback: CallbackQuery):
    user_id = callback.from_user.id
    username = callback.from_user.username or "No username"
    full_name = callback.from_user.full_name or "No name"
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await update_user_activity(user_id)

    # –ª–æ–≥–∏—Ä—É–µ–º callback-–∑–∞–ø—Ä–æ—Å—ã
    log_entry = f"[{timestamp}] User ID: {user_id}, Username: @{username}, Name: {full_name}, Callback: open_menu\n"
    with open(LOG_FILE, "a", encoding="utf-8") as log_file:
        log_file.write(log_entry)

    await menu_cmd(callback.message)
    await callback.answer()


@dp.message(Command("chart"))
async def chart_menu(message: types.Message):
    await log_command(message, "/chart")
    user_id = message.from_user.id
    lang = await get_user_language(user_id)

    buttons = [
        [InlineKeyboardButton(text=name, callback_data=f"chart_{token}")]
        for name, token in popular_tokens.items()
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await message.answer(translations[lang]["select_token"], reply_markup=keyboard)


@dp.callback_query(lambda c: c.data.startswith("chart_"))
async def send_chart(callback: CallbackQuery):
    user_id = callback.from_user.id
    username = callback.from_user.username or "No username"
    full_name = callback.from_user.full_name or "No name"
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    # –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await update_user_activity(user_id)

    lang = await get_user_language(user_id)

    # –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ —Å –≤—ã–±–æ—Ä–æ–º –≥—Ä–∞—Ñ–∏–∫–∞
    log_entry = f"[{timestamp}] User ID: {user_id}, Username: @{username}, Name: {full_name}, Callback: {callback.data}\n"
    with open(LOG_FILE, "a", encoding="utf-8") as log_file:
        log_file.write(log_entry)

    token = callback.data.split("_", 1)[1]
    try:
        chart_buf = generate_price_chart(token, lang=lang)
        desc = get_token_description(token, lang)

        photo = BufferedInputFile(chart_buf.read(), filename=f"{token}.png")
        await callback.message.answer_photo(
            photo=photo,
            caption=translations[lang]["chart_caption"].format(token.upper())
        )
        await callback.message.answer(f"{translations[lang]['description']}\n{desc}")
        await callback.answer()
    except Exception as e:
        await callback.message.answer(translations[lang]["chart_error"].format(str(e)))


@dp.message(Command("language"))
async def language_cmd(message: types.Message):
    await log_command(message, "/language")
    user_id = message.from_user.id
    lang = await get_user_language(user_id)

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=translations[lang]["language_ru"], callback_data="lang_ru")],
            [InlineKeyboardButton(text=translations[lang]["language_en"], callback_data="lang_en")]
        ]
    )
    await message.answer(translations[lang]["select_language"], reply_markup=keyboard)


@dp.callback_query(lambda c: c.data.startswith("lang_"))
async def set_language_callback(callback: CallbackQuery):
    user_id = callback.from_user.id
    username = callback.from_user.username or "No username"
    full_name = callback.from_user.full_name or "No name"
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    # –ø–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫
    selected_lang = callback.data.split("_", 1)[1]

    # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–¥
    await set_user_language(user_id, selected_lang)
    await update_user_activity(user_id)

    # –ª–æ–≥–∏—Ä—É–µ–º –≤—ã–±–æ—Ä —è–∑—ã–∫–∞
    log_entry = f"[{timestamp}] User ID: {user_id}, Username: @{username}, Name: {full_name}, Set language: {selected_lang}\n"
    with open(LOG_FILE, "a", encoding="utf-8") as log_file:
        log_file.write(log_entry)

    # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ
    await callback.message.answer(translations[selected_lang]["language_changed"])
    await callback.answer()


@dp.message()
async def echo_handler(message: types.Message):
    # –ª–æ–≥–∏—Ä—É–µ–º –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    user_id = message.from_user.id
    username = message.from_user.username or "No username"
    full_name = message.from_user.full_name or "No name"
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    # –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –±–¥
    await get_or_create_user(user_id, username, full_name)
    await update_user_activity(user_id)

    lang = await get_user_language(user_id)

    log_entry = f"[{timestamp}] User ID: {user_id}, Username: @{username}, Name: {full_name}, Message: {message.text}\n"
    with open(LOG_FILE, "a", encoding="utf-8") as log_file:
        log_file.write(log_entry)

    text = message.text.lower()
    if text in ['–ø—Ä–∏–≤–µ—Ç', '–ø—Ä–∏–≤–µ—Ç–∏–∫', 'hello', 'hi', '—Ö—ç–ª–æ—É']:
        await message.answer(translations[lang]["hello_response"])
    elif text in ['–ø–æ–∫–∞', '–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è', 'bye', '–ø–∞–∫–µ–¥–∞']:
        await message.answer(translations[lang]["bye_response"])
    else:
        await message.answer(translations[lang]["unknown_command"])


async def main():
    log_dir = os.path.dirname(LOG_FILE)
    os.makedirs(log_dir, exist_ok=True)
    # —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—å
    if not os.path.exists(LOG_FILE):
        with open(LOG_FILE, "w", encoding="utf-8") as f:
            f.write("Telegram Bot Command Log \n\n")

    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())